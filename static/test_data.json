{"messages":"Compiling winapi v0.2.6\n   Compiling serde_codegen v0.7.1\n   Compiling rustc-serialize v0.3.18\n   Compiling aster v0.14.0\n   Compiling winapi-build v0.1.1\n   Compiling libc v0.2.8\n   Compiling bitflags v0.3.3\n   Compiling quasi v0.8.0\n   Compiling num v0.1.31\n   Compiling traitobject v0.0.1\n   Compiling unicode-normalization v0.1.2\n   Compiling semver v0.1.20\n   Compiling kernel32-sys v0.2.1\n   Compiling lazy_static v0.1.15\n   Compiling gcc v0.3.25\n   Compiling log v0.3.5\n   Compiling matches v0.1.2\n   Compiling getopts v0.2.14\n   Compiling mime v0.2.0\n   Compiling language-tags v0.2.2\n   Compiling openssl v0.7.6\n   Compiling unicode-bidi v0.2.3\n   Compiling httparse v1.1.1\n   Compiling hpack v0.2.0\n   Compiling pkg-config v0.3.8\n   Compiling serde v0.7.0\n   Compiling quasi_codegen v0.8.0\n   Compiling openssl-sys-extras v0.7.6\n   Compiling time v0.1.34\n   Compiling num_cpus v0.2.11\n   Compiling rand v0.3.14\n   Compiling typeable v0.1.2\n   Compiling rustc_version v0.1.7\n   Compiling openssl-sys v0.7.6\n   Compiling solicit v0.4.4\n   Compiling unicase v1.3.0\n   Compiling quasi_macros v0.8.0\n   Compiling uuid v0.1.18\n   Compiling url v0.5.7\n   Compiling serde_json v0.7.0\n   Compiling cookie v0.2.2\n   Compiling hyper v0.8.0\n   Compiling serde_macros v0.7.0\n   Compiling rustw v0.1.0 (file:///home/ncameron/rustw)","errors":[{"message":"`extern \"C\" fn(*mut libc::c_void, &mut i32, *mut libc::c_void) -> i32 {ssl::raw_sni}` is now zero-sized and has to be cast to a pointer before transmuting to `extern \"C\" fn()`, #[warn(transmute_from_fn_item_types)] on by default","code":null,"level":"warning","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":137477,"byte_end":137491,"line_start":572,"line_end":572,"column_start":38,"column_end":52}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":137477,"byte_end":137491,"line_start":572,"line_end":572,"column_start":0,"column_end":0}],"children":[]},{"message":"for more information, see issue #19925 <https://github.com/rust-lang/rust/issues/19925>","code":null,"level":"note","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":137477,"byte_end":137491,"line_start":572,"line_end":572,"column_start":0,"column_end":0}],"children":[]}]},{"message":"`extern \"C\" fn(*mut libc::c_void, &mut i32, *mut libc::c_void) -> i32 {ssl::raw_sni_with_data::<isize>}` is now zero-sized and has to be cast to a pointer before transmuting to `extern \"C\" fn()`, #[warn(transmute_from_fn_item_types)] on by default","code":null,"level":"warning","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":138222,"byte_end":138236,"line_start":589,"line_end":589,"column_start":38,"column_end":52}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":138222,"byte_end":138236,"line_start":589,"line_end":589,"column_start":0,"column_end":0}],"children":[]},{"message":"for more information, see issue #19925 <https://github.com/rust-lang/rust/issues/19925>","code":null,"level":"note","spans":[{"file_name":"/home/ncameron/.cargo/registry/src/github.com-88ac128001ac3a9a/openssl-0.7.6/src/ssl/mod.rs","byte_start":138222,"byte_end":138236,"line_start":589,"line_end":589,"column_start":0,"column_end":0}],"children":[]}]},{"message":"unreachable pattern","code":{"code":"E0001","explanation":"\nThis error suggests that the expression arm corresponding to the noted pattern\nwill never be reached as for all possible values of the expression being\nmatched, one of the preceding patterns will match.\n\nThis means that perhaps some of the preceding patterns are too general, this\none is too specific or the ordering is incorrect.\n\nFor example, the following `match` block has too many arms:\n\n```compile_fail\nmatch foo {\n    Some(bar) => {/* ... */}\n    None => {/* ... */}\n    _ => {/* ... */} // All possible cases have already been handled\n}\n```\n\n`match` blocks have their patterns matched in order, so, for example, putting\na wildcard arm above a more specific arm will make the latter arm irrelevant.\n\nEnsure the ordering of the match arm is correct and remove any superfluous\narms.\n"},"level":"error","spans":[{"file_name":"src/server.rs","byte_start":5859,"byte_end":5891,"line_start":47,"line_end":47,"column_start":17,"column_end":49}],"children":[]},{"message":"unreachable pattern","code":{"code":"E0001","explanation":"\nThis error suggests that the expression arm corresponding to the noted pattern\nwill never be reached as for all possible values of the expression being\nmatched, one of the preceding patterns will match.\n\nThis means that perhaps some of the preceding patterns are too general, this\none is too specific or the ordering is incorrect.\n\nFor example, the following `match` block has too many arms:\n\n```compile_fail\nmatch foo {\n    Some(bar) => {/* ... */}\n    None => {/* ... */}\n    _ => {/* ... */} // All possible cases have already been handled\n}\n```\n\n`match` blocks have their patterns matched in order, so, for example, putting\na wildcard arm above a more specific arm will make the latter arm irrelevant.\n\nEnsure the ordering of the match arm is correct and remove any superfluous\narms.\n"},"level":"error","spans":[{"file_name":"src/server.rs","byte_start":5987,"byte_end":6008,"line_start":50,"line_end":50,"column_start":17,"column_end":38}],"children":[]},{"message":"unreachable pattern","code":{"code":"E0001","explanation":"\nThis error suggests that the expression arm corresponding to the noted pattern\nwill never be reached as for all possible values of the expression being\nmatched, one of the preceding patterns will match.\n\nThis means that perhaps some of the preceding patterns are too general, this\none is too specific or the ordering is incorrect.\n\nFor example, the following `match` block has too many arms:\n\n```compile_fail\nmatch foo {\n    Some(bar) => {/* ... */}\n    None => {/* ... */}\n    _ => {/* ... */} // All possible cases have already been handled\n}\n```\n\n`match` blocks have their patterns matched in order, so, for example, putting\na wildcard arm above a more specific arm will make the latter arm irrelevant.\n\nEnsure the ordering of the match arm is correct and remove any superfluous\narms.\n"},"level":"error","spans":[{"file_name":"src/server.rs","byte_start":6391,"byte_end":6411,"line_start":57,"line_end":57,"column_start":17,"column_end":37}],"children":[]},{"message":"unreachable pattern","code":{"code":"E0001","explanation":"\nThis error suggests that the expression arm corresponding to the noted pattern\nwill never be reached as for all possible values of the expression being\nmatched, one of the preceding patterns will match.\n\nThis means that perhaps some of the preceding patterns are too general, this\none is too specific or the ordering is incorrect.\n\nFor example, the following `match` block has too many arms:\n\n```compile_fail\nmatch foo {\n    Some(bar) => {/* ... */}\n    None => {/* ... */}\n    _ => {/* ... */} // All possible cases have already been handled\n}\n```\n\n`match` blocks have their patterns matched in order, so, for example, putting\na wildcard arm above a more specific arm will make the latter arm irrelevant.\n\nEnsure the ordering of the match arm is correct and remove any superfluous\narms.\n"},"level":"error","spans":[{"file_name":"src/server.rs","byte_start":6658,"byte_end":6696,"line_start":63,"line_end":63,"column_start":17,"column_end":55}],"children":[]},{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[]}]}